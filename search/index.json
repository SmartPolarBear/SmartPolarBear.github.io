[{"content":"Now, at the beginning of 2021, while celebrating the anniversary of this project, where most of my effort in the past year was devoted, it\u0026rsquo;s vital to make clear the road head for it.\nHindsight What has been done for it in the past year and a few months? Above growing from the very first assembly file to a large project with tens of thousands of lines of code, these aspects stands out:\n  The Improvement of infrastructures of kernel at the end of 2020, after 4 months struggling with file system, a minimum subset of EXT2 which support common operations like reading, creating and writing are implemented with a complete VFS abstraction. For the first time RAII and class hierarchy were adopted for kernel components. With the filesystem, all the modules of a usable kernel have been worked on more or less.\n  Reliable build system has been adopted Growing larger and larger, it\u0026rsquo;s difficult to manage the project by traditional makefiles, which is why CMake was introduced at earlier time last year. And after the long time working on the project, the decision turns out to be right. CMake provides a powerful tool to manage the project, as well as external dependencies.\n  Code style and best practices were formed Working long time with kernel, code styles like naming conventions have gained stability, and common best practices on kernel coding have been figured out.\n  Now   Better process model\n  Optimized memory management\n  Cache for file system\n  Refactoring and resource leaks fixing\n  Future   Move things out of kernel\n  Improved synchronization infrastructures\n  Rights and security\n  ","date":"2021-01-30T23:55:00+08:00","exists":true,"isDefault":false,"permalink":"/posts/project-dionysus-vision-of-2021/dionysus.jpg","resource":{},"title":"Project Dionysus : The Vision of 2021"},{"content":"Prologue  Dating back to a year ago, when I was attempting to add various features to the original rexv6-2 project, I am trapped by some very tough issues. I had been ambitious about the plan, but many of them turn out to be too hard to be carried out, and some of the original code of xv6, frankly speaking, is somehow out of date. That\u0026rsquo;s when it flashed on me that it may be better to build a new one from scratch. At that time, I meet the series of papers about minix3 and the concept of microkernel, and exokernel, described by a paper from MIT. They were really appealed to me. In the following months, it gradually become the main work for me, and soon turned to be the longest-lasting personal project of mine.\nWhy Operation System Kernel?  As science and technologies advancing, all the devices are becoming powerful, bringing the concept of \u0026ldquo;Install and remove apps\u0026rdquo; everywhere, following the increasingly urgent need of reliable operation system kernels equipped with modern concepts and consensus. Among all the needs, security and reliability should be the top. Intricate problem involved, it is impossible to keep the old routines. The new kernels recently appear in the industry, Google\u0026rsquo;s zircon for example, regard the concepts of microkernel, strictly isolated processes, and the well-encapsulated resource management as the key to success in the future. As the new consensus of the industry, these concepts must be invaluable for me, a freshman planning to major computer science, to acquire proficiency in. That\u0026rsquo;s the ultimate aim of project Dionysus.\nWhat\u0026rsquo;s the Principles of Development   Care about kernel itself first.\nHaving learned from previous attempts and failures, In this project, grub2 is used to boot the kernel, to block away the details and tricks that are too legacy. And user applications, shells, and GUI are not priorities.\n  Application of data structures and algorithms\nBeing more familiar with data structures and algorithms with deeper understanding, It\u0026rsquo;s high time I should use it in a project and observe their pros and cons in production.\n  Understand every details, and choose the best\nI regard this as a serious project to learn. So I shall figure out all every detail including how popular operation system do and why they do like that and choose the best means among them so as to deepen my understanding about operation system.\n  What\u0026rsquo;s Going on Now?  Despite the ultimate aim, the more advanced a concept is, the harder it is for an individual to implement. So now the job is to first build a usable kernel on the mature techniques and concepts that popular operation system kernels mostly rely on. By now, the following modules had been covered partly or completely:\n Memory management Drivers Process management Power management File system Facilities for user apps Framework and libraries that all the above involved   And they are now temporarily built into a macro kernel but are neatly divided and isolated from each other, making it possible for future changes.\n Dionysus kernel, after finishing booting and initializations \nBecause of the complexity of file system and the design of interfaces, the development has been slow recently . A rough schedule is to finishe file system by the end of 2020, and finished other kernel modules by mid-2021.\nWhat\u0026rsquo;s the Plan for the Future?  Dionysus kernel, future architecture simple diagram \nTo achieve the goal, after all the features are tested to work well, the first step is to implement a object manager to provide uniform interface and security guard for all the resource, making all the resources appears to be handles. and then the modules will be moved to separate processes running under kernel privileges.\nThe reason why system servers still run under kernel privileges is to simplify the development work. And two separate sets of API provided will make it easy to port existent Linux apps like LLVM C/C++ standard libraries and compiler kits.\nAs another goal for me, a hand-made simple compiler may be implemented and used in the accomplished project, but so far there\u0026rsquo;s no plan to build a kernel with custom compilers.\nEpilogue  I remember that I have had the idea to implement a kernel very early after I learn how to code. The urge become so strong that I make the first attempt when I graduate from junior high school, when I even find it difficult to understand the difference between physical memory and virtual memory. Then I made a few attempts afterwards, slowly becoming aware of the key points of kernel and how to build a kernel. During times of try and fail, I gradually know how to work with Linux distributions and start to fall under the spell of the philosophy of UNIX. And then I learned more, and finally became determined to write my own. I am serious, and I will try my best this time to build a usable one with everything I\u0026rsquo;d ever imagined on it.\n","date":"2020-10-11T16:25:35+08:00","exists":true,"isDefault":false,"permalink":"/posts/project-dionysus-why-and-what/bootup.png","resource":{},"title":"Project Dionysus - Why and What"},{"content":"Introduction Being considered as the three romances of a programmer, An OS is both challenging and interesting project to dive in. As a mature codebase of operation system study, xv6 is a good re-implementation of Unix v6, which is used by MIT\u0026rsquo;s 6.828. This project aims at apply improvements on the a quasi-original codebase of xv6 (xv6-improved) , adding including new kernel features and user support so as to create a linux-like full-featured kernel, including some modern techniques, such as MLFQ scheduling and an extended file system.\nTaking the mistakes of the 1st generation rexv6 project into consideration, the project will firstly be improved on the vital parts such as processes and memory management. Then filesystem and shell will be tweaked and a graphic framework will be finally constructed.\nIn the implement of all the features, the algorithms and data structure will be thought over discreetly and put in the first place, instead of the feature itself or the amount of the features, so as to gain great efficiency.\nGoals Uncomplete and unsorted goals are listed below:\n Lottery Scheduler FAT32 support Signals File structures and make system manipulations Support for various file systems and driver types Separating device driver from the kernel Memory management tweaks Shell and GUI POSIX compatibility  Try it out  Starup Screen \nWhat you need   A available Linux environment with Qemu installed.\nThe alternatives includes WSL and any other virtual PCs. I am using Debian on WSL.\n  Build-essentials, or at least GNU tools such as gdb and gcc.\nGCC 6.3.0 is being used.\n  Clone The project is hosted at rexv6-2\n$ git clone https://github.com/SmartPolarBear/rexv6-2.git\nBuild $ make qemu\n","date":"2019-05-30T23:11:01+08:00","exists":true,"isDefault":false,"permalink":"/posts/announcing-rexv6-proj/startup.png","resource":{},"title":"Announcing the Re-xv6-2 project"},{"content":"Hands-On This morning I finally received my Raspberry Pi, after an eight-day-long delivery. Raspberry Pi 3B+, released in 2018, as is said, is more powerful than its predecessor. The first step after opening the box is to add two head sinks on the chip. The CPU doesn\u0026rsquo;t need one although its performance has been greatly improved, for it already has one. The given box has no reserved space for GPIO pins, which make it impossible to use it with GPIO peripherals. Therefore, my trick is that I installed a half of the box opposite down like what\u0026rsquo;s shown below.\n Raspberry 3B+ \nSetup I planed to run Windows 10 IoT at first, but finally I decided to use Raspbian as the support for 3B+ has not been officially released. The preview version is buggy and what\u0026rsquo;s worse, it can\u0026rsquo;t support the on-board Wi-Fi.\nAs for setup, convenient as it is generally, there\u0026rsquo;s a big obstacle that I don\u0026rsquo;t have either a network cable or a set of keyboard and mouse. Moreover, my main PC runs Windows, which make the process more complicated.\nFor a headless setup, we need two computers if your main computer runs Windows. As we often do for Pi on Windows, I format the micro SD card and write the Raspbian image with SD Card Formatter from Tuxera Inc. and Rufus. Then, the step is a bit different than common. After mounting the card on a Linux computer, edit the file located in /etc/wpa_supplicant/wpa_supplicant.conf . For example, we use nano.\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf And append a network section like below:\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\u0026#34;Your wifi\u0026#39;s SSID\u0026#34; psk=\u0026#34;Password\u0026#34; key_mgmt=WPA-PSK } If you are living in China, don\u0026rsquo;t forget a country=CN before the network section. Then insert the card, whose slot should be in the other end of USBs on the board, and power on the Pi. When the red light is on and the green light is off, you can notice a new device in your router\u0026rsquo;s management page, which is often 192.168.1.1 or 192.168.3.1. My Pi shows as a dhcpcd-6.11.5-armv7l in the router\u0026rsquo;s management page with the IP shown in the screenshot.\n Raspberry 3B+’s IP \nWith the IP address shown, we can easily connect to the Pi by any ssh tools. For example, putty.\n Putty \nLogin and Have Fun As a Raspberry Pi denies a remote connection to the root user, we should login with pi user and the default password is raspberry. The connection should be established well now and you can do anything with this tiny Linux device. Have fun!\nWhat\u0026rsquo;s Next In the next passage I am going to control a LED matrix with GPIO pins. I will write a program in C++ or Python3 to control the MAX7219 module.\nReference  How to set up Raspberry Pi without a monitor? 树莓派 Raspberry Pi 3 无显示器安装 Troubleshooting, Raspberry Pi 3B+ booting issues   ","date":"2019-02-23T19:40:08+08:00","exists":true,"isDefault":false,"permalink":"/posts/resp-pi-headless-setup/Pi1.png","resource":{},"title":"Respberry Pi 3B+ Headless Setup"}]