<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>XKZZZZZZ&#39;s Lab</title>
        <link>https://xkzzzzzz.xyz/</link>
        <description>Recent content on XKZZZZZZ&#39;s Lab</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 28 Apr 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://xkzzzzzz.xyz/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Looking Back to 2020: PROVEHITO IN ALTUM</title>
        <link>https://xkzzzzzz.xyz/posts/looking-back-in-2020-provehito-in-altum/</link>
        <pubDate>Wed, 28 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/looking-back-in-2020-provehito-in-altum/</guid>
        <description>&lt;p&gt;It&amp;rsquo;s mid-2021, and this post, which is supposed to come out in Janurary, is finally complete. 2020 is a special year, both for the whole world and me. After consideration, I still believe that it deserve some record and hindsight for myself.&lt;/p&gt;
&lt;h2 id=&#34;see-further&#34;&gt;See Further&lt;/h2&gt;
&lt;p&gt;    Entering the university, the courses,  complicated and difficult, provide more higher perspective in understanding and analyzing than challenges. I had ever tried to apply transformations on image with GDI+, where all the adjustments made, like changes in brightness or saturation, are expressed in what&amp;rsquo;s called a transforming matrix. With few tools as a pupil, I, at that time, can only have a test on all the elements in that 5x5 matrix, or just copy codes and wish it could work, to provide certain features. But with the grab on linear algebra, now I can well understand how it works, and even more sophisticated designs like why it use a 5x5 matrix while only 4 channels of colors presented in the image. Through the tough journey of learning these abstract  stuff, I am equipped with enough tools to see further, and know things better at the very beginning of every project.&lt;br&gt;
     Above all, I have made plans to read. It&amp;rsquo;s may be strange for a engineering student to read about labor movement and things, but I deem it important. The ancestors, being remembered or forgot, right before the dawn of a better society, risk their life to push the society forward, to defend their human rights. Their courage, and their devotion are worth knowing and remembering. Moreover, though I have basic knowledge and practical experience on them, I try to read famous materials and books about networking, data structures and algorithms. I am determined to synthesize and systematize my knowledge about them.&lt;/p&gt;
&lt;h2 id=&#34;dive-deeper&#34;&gt;Dive Deeper&lt;/h2&gt;
&lt;p&gt;    Yes, as a Computer Science student I have to code. But I do not want to be one who can only code. The whole year, most spent at home, provide me with ample time to read and learn more about what&amp;rsquo;s under the surface. It never a puzzle now for me that how a operation system kernel works, for I have tried to create one from scratch, and learned the supplicated design and the rigor logic &amp;ldquo;behind the curtain&amp;rdquo;, happening secretly when calling APIs , or syscalls. And, as the first of its kind for me, projects involving declarative-style UI and compilers have started. The cutting edge of the industry, and the basement of nearly everything, will soon be explored by me.&lt;/p&gt;
&lt;h2 id=&#34;getting-involved&#34;&gt;Getting Involved&lt;/h2&gt;
&lt;p&gt;    No one should be the slave of tests and scores. I firmly believe that everyone is supposed to develop their abilities in all ways, which is why I, despite tight schedule and academic pressure, get involved in various kind of things. I participate in acquisition and processing department of  student union and have taken charge of some posts.&lt;br&gt;
Moreover, as a developer of open-source project, I take a more active part on GitHub, creating issues and making discussions. Helping others helped myself a lot. Not only because when helping others I learned about cope with various problems, but also because during the procedure I improve my ability to express.&lt;br&gt;
There is one thing that delighted me so much. One is that I became an Arctic Code Vault Contributor. I mean, it&amp;rsquo;s surely no wonder for any contributers who have actively-developing project on GitHub, but as for me, for the first time, I find my hard work has been a part of the human history. It will never perish from the world in the storage in the arctic, and it&amp;rsquo;s a mark that I come to this world and live.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;20 Ranges at First Glance</title>
        <link>https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/</link>
        <pubDate>Sun, 07 Feb 2021 23:40:03 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/</guid>
        <description>&lt;p&gt;Since years before C++ 20&amp;rsquo;s release, I have been keeping a close eye on it. Many new features fairly tickle my fancy, among which are &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;  and &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; library components. While there&amp;rsquo;s no available implementation for &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; yet, MSVC 16.8 and GCC-10 provides a usable  &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; which I played with and writes the post for.&lt;/p&gt;
&lt;p&gt;My life highly involved closely with programming begins with a long period using C#. Among all the language features of C#, LINQ is the beloved one for me. Enabled by LINQ, I can express complicated queries clearly and elegantly, and the performance is ensured by delaying the evaluation to when the results is used. Years after my last C# project, the smooth feeling using LINQ still remain fresh in my memory. The ranges library, now, enable I to do it similarly, which is why I dash to have a try.&lt;/p&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-what&#34; &gt;What is a Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-use&#34; &gt;Use Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-ca&#34; &gt;Ranges and Constrained Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-ra&#34; &gt;Ranges and Range Adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-le&#34; &gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-rc&#34; &gt;Ranges and Coroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-ep&#34; &gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#id-fr&#34; &gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-is-a-range-a-nameid-whata&#34;&gt;What is a Range? &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;As is mentioned in &lt;a class=&#34;link&#34; href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;N4128&lt;/a&gt; , A range is a reference to a sequence of elements:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A range is an object that refers to a sequence of elements, conceptually similar to a pair of iterators.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bjarne Stroustrup, emphasized in his &lt;em&gt;Thriving in a Crowded and Changing World: C++ 2006–2020&lt;/em&gt;, that :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A range is a concept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A range is defined by concept as follows (from &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/ranges/range&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;std::ranges::range on cppreference&lt;/a&gt;) :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;concept&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;requires&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// equality-preserving for forward iterators
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The definition, given that you have known about STL containers, is quite easy to understand. Given &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt;, it constraints what can be iterated by an iterator and a sentinel that marks the end.&lt;/p&gt;
&lt;p&gt;Iterators are constantly seen especially in STL to define a sequence, which provide a uniform interface to operate or traverse the elements and support some important language features like range-based for, while they do have some inconvenience. A simple example is to traverse part of a container whose elements satisfy a certain criterion with range-based for loop. Moreover, the increasing need for a way to avoid many variables to store intermediate results while ensuring the security gives birth to the STL &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;, which is likely to be used more widely than its &lt;code&gt;Boost.ranges&lt;/code&gt; ancestor.  The ranges library defines a lot of components for dealing with ranges, commonly-used view adapters included. With its various new features and improvements, it is called &amp;ldquo;the STL 2.0&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;use-ranges-a-nameid-usea&#34;&gt;Use Ranges &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Enable &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; is relatively easy,  as a language feature of C++ 20, The only configuration needed is to set the language version to C++ 20 .&lt;/p&gt;
&lt;h3 id=&#34;msvc-168-and-later&#34;&gt;MSVC 16.8 and Later&lt;/h3&gt;
&lt;p&gt;In MSVC, set the language standard to &amp;ldquo;Features from the Latest C++ Working Draft&amp;rdquo; (&lt;code&gt;/std:c++latest&lt;/code&gt;) in project&amp;rsquo;s &lt;em&gt;Properties-&amp;gt;Configuration Properties-&amp;gt;General&lt;/em&gt; :&lt;br&gt;
&lt;figure style=&#34;flex-grow: 159; flex-basis: 383px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/set-language-standard.png&#34; data-size=&#34;753x471&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/set-language-standard.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/set-language-standard_hub856ef8b2646e70076cdb69a8de32fb6_22546_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/set-language-standard_hub856ef8b2646e70076cdb69a8de32fb6_22546_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;753&#34;
				height=&#34;471&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Setting&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Setting&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;gcc-10-and-later&#34;&gt;GCC-10 and Later&lt;/h3&gt;
&lt;p&gt;In GCC, simply pass &lt;code&gt;-std=c++20&lt;/code&gt; to the compiler.&lt;/p&gt;
&lt;h3 id=&#34;implementation-status&#34;&gt;Implementation Status&lt;/h3&gt;
&lt;p&gt;It is worth mentioning that MSVC&amp;rsquo;s implementation is quite a partial one with inferior support for range adapters, and the Intellisense does not work well from time to time. However, there are some components of coroutines that only available in MSVC, so some of the code snippets below are compiled with and only with MSVC, and others are, and maybe only are compiled with GCC-11. For details, refer to &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/compiler_support/20&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Compiler support for C++20&lt;/a&gt;, or the C++ status page of certain compiler.&lt;/p&gt;
&lt;h2 id=&#34;ranges-and-constrained-algorithms-a-nameid-caa&#34;&gt;Ranges and Constrained Algorithms &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Remeber how we use, for example, &lt;code&gt;std::sort&lt;/code&gt; to sort a &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;? We always use iterators in the paradigm of &lt;em&gt;[first,one_beyond_last)&lt;/em&gt; to express the elements that needs sorting, but given that we sort the whole container, is there any chance for it to be simplified? &lt;strong&gt;YES!&lt;/strong&gt; with Ranges. As containers like a &lt;code&gt;vector&lt;/code&gt; has the &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; member, the container itself is a range, so with ranges following code can be write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Such simpified STL algrithms are called &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/algorithm/ranges&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Constrained algorithms&lt;/a&gt;. Nearly all STL algorithms have constrained version, which not only simplified the use, but also strengthen the ability of the ranges library if used with what&amp;rsquo;s discussed below.&lt;/p&gt;
&lt;h2 id=&#34;ranges-and-range-adapters-a-nameid-raa&#34;&gt;Ranges and Range Adapters &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s begin with a relatively easy example. Now given a container of integers, the task is to get the first two even ones and get their squares. With ranges library, it&amp;rsquo;s straight forward to express the task as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;even&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;square&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;even&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But, hey, is there any difference with traditional way to deal with containers? The prolonged and complicated nested function calling &lt;code&gt;std::views::take(std::views::transform(std::views::filter(vec, even), square), 2)&lt;/code&gt; is the very thing that many programmers dislike to see, let along the complexity to add a new operation or change the order.  Why isn&amp;rsquo;t it good to see? partly because readers should find the operands from the inner-most call and then read the parameters and recursively going out layer by layer. Constantly glancing forth and back is tiring, right?  So it&amp;rsquo;s time to introduce what really pleased me of the ranges library: the pipeline operator.&lt;/p&gt;
&lt;p&gt;As a noticeable feature of ranges library,  the pipeline operator  &lt;code&gt;|&lt;/code&gt; means delivering the output of its left-hand operand as the input to its right-hand operand. This enables a elegant way to express a sequence of operations for something, or somehow a functional-style programming. With the magic of it, we can turn the traditional composing syntax to the following code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;even&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
			&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty and clear, isn&amp;rsquo;t it ? the container and the operations on it are concatenated with the pipeline operator and is used by the range-based for. When reading the code, we glance the operands of the pipeline operators line by line, providing a very nature and easy way to understand the code. It is the relief of mental burden that reduces the change of producing buggy code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;transform()&lt;/code&gt;, and &lt;code&gt;take()&lt;/code&gt; plays an important part in the code above, which are called &lt;em&gt;&lt;strong&gt;range adapters&lt;/strong&gt;&lt;/em&gt;. Range adapters take &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/ranges/viewable_range&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;viewable_range&lt;/code&gt;&lt;/a&gt;s as their parameters and can be called by the pipe operators. The standard library defined a set of range adapters (&lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/ranges&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ranges on cppreference&lt;/a&gt;), which provide various transformation on ranges. For example, to join many containers, the code below can be simply write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which gives the output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 2 3 4 5 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also by using &lt;code&gt;std::views::join&lt;/code&gt;, we can concatenate strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which gives the output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;c++20&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, we can take element from a container of tuples by using &lt;code&gt;std::views::elements&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The outputs are&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2&lt;br&gt;
5&lt;br&gt;
8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With these range adapters&#39; help, it is no longer a problem to write elegant code to operate ranges with good readability. But what concerns to C++ programmers is that, what about performance ?&lt;/p&gt;
&lt;h2 id=&#34;lazy-evaluation-a-nameid-lea&#34;&gt;Lazy Evaluation &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;C++ programmers cares about performance, so how does the &lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; library ensure it? the key is lazy evaluation.  Lets take the a simple code snippet as a example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;even&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the whole expression of the second line &lt;code&gt;auto v = ...&lt;/code&gt;  generates a view, neither modifying what in &lt;code&gt;vec&lt;/code&gt;, nor copying any elements to elsewhere and storing theme. In other words, the construct of &lt;code&gt;v&lt;/code&gt; has nothing to do with the size of &lt;code&gt;vec&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we print &lt;code&gt;*v.begin()&lt;/code&gt;, which is when the evaluation happens. The on-demand evaluation not only ensure that they can be used everywhere iterators can be used, but also make sure the performance with complicated transformations, for evaluation happens just when the value is used and will not happen a second time. Sounds great, isn&amp;rsquo;t it? If only it can play with not only STL containers.&lt;/p&gt;
&lt;h2 id=&#34;ranges-and-coroutines-a-nameid-rca&#34;&gt;Ranges and Coroutines &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Coroutine is indeed the focus of C++ 20, which enjoys great popularity even before its release. Coroutines are, in simple words, functions that can suspend and resume. Isn&amp;rsquo;t it traits give you a strong sense that it&amp;rsquo;s a good couple with the ranges library, given that it has the lazy evaluation feature?&lt;/p&gt;
&lt;p&gt;For example, with &lt;a class=&#34;link&#34; href=&#34;https://en.cppreference.com/w/cpp/language/coroutines&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Coroutines (C++20)&lt;/a&gt;, it&amp;rsquo;s easy to write a Fibonacci generator like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// #include &amp;lt;experimental/generator&amp;gt; on MSVC 16.8
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;k&#34;&gt;co_yield&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;co_return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is surely not what we regard as a container, which all the examples above dealt with. However, remember what mentioned in the beginning that :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A range is a concept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given that a generator has &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; member, it satisfies the concept and therefore cooperates well with the ranges library. The code below demonstrates how to filter even numbers from the first 15 elements of the Fibonacci sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib_gen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;even_fib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib_gen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;views&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, with the help of coroutines and ranges, till now, no real evaluation happens, until we really use some of its values, like iterating through the even numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;even_fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which gives the output:&lt;br&gt;
&lt;figure style=&#34;flex-grow: 87; flex-basis: 209px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/output_even_fib.png&#34; data-size=&#34;131x150&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/output_even_fib.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/output_even_fib_hu1394eb2c4939cfc5e0372b3dbf998fee_3553_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/cpp20-ranges-at-first-glance/output_even_fib_hu1394eb2c4939cfc5e0372b3dbf998fee_3553_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;131&#34;
				height=&#34;150&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Even fibonacci numbers&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Even fibonacci numbers&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;epilogue--a-nameid-epa&#34;&gt;Epilogue  &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;p&gt;Ranges, as a important and useful library component, deserve the &amp;ldquo;STL 2.0&amp;rdquo; name, and provides a uniform way to express the concept of range and compose transformation and STL algorithms. Although the ranges are not aimed to replace iterators, they reduce the explicit use of iterators, simplifying code.&lt;/p&gt;
&lt;p&gt;With ranges and coroutines, more effective programs with elegant code and good code readability will be really easy to achieve, which handle IO delays and parallelism well. In the near future, &lt;a class=&#34;link&#34; href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4734.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Networking TS&lt;/a&gt; is going to be merged into C++23, when coroutines and ranges can be used widely by larger number of applications. For example, &lt;code&gt;const_buffer&lt;/code&gt; and 	&lt;code&gt;mutable_buffer&lt;/code&gt; of the &lt;em&gt;Networking TS&lt;/em&gt; satisfy the &lt;code&gt;range&lt;/code&gt; concept.&lt;/p&gt;
&lt;h2 id=&#34;further-reading--a-nameid-fra&#34;&gt;Further Reading  &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h2&gt;
&lt;h4 id=&#34;1-thriving-in-a-crowded-and-changing-world-c-20062020-bjarne-stroustrup&#34;&gt;1. Thriving in a Crowded and Changing World: C++ 2006–2020, Bjarne Stroustrup.&lt;/h4&gt;
&lt;p&gt;This paper demonstrate the history of modern C++ (C++11 and later) and gives a comprehensive  view of language and library features like concepts, coroutines and ranges, as well as their history.&lt;/p&gt;
&lt;h4 id=&#34;2ranges-tshttpwwwopen-stdorgjtc1sc22wg21docspapers2017n4685pdf-and-coroutines-tshttpswwwisoorgstandard73008html&#34;&gt;2.&lt;a class=&#34;link&#34; href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4685.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ranges TS&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://www.iso.org/standard/73008.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(Coroutines TS)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Standard documents about the ranges library and coroutines.&lt;/p&gt;
&lt;h4 id=&#34;3a-beginners-guide-to-c-ranges-and-viewshttpshanneshauswedellnetpost20191130range_intro&#34;&gt;3.&lt;a class=&#34;link&#34; href=&#34;https://hannes.hauswedell.net/post/2019/11/30/range_intro/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A beginner&amp;rsquo;s guide to C++ Ranges and Views.&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Very concrete introduction to the ranges concepts and views.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Project Dionysus : The Vision of 2021</title>
        <link>https://xkzzzzzz.xyz/posts/project-dionysus-vision-of-2021/</link>
        <pubDate>Sat, 30 Jan 2021 23:55:00 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/project-dionysus-vision-of-2021/</guid>
        <description>&lt;img src="https://xkzzzzzz.xyz/posts/project-dionysus-vision-of-2021/dionysus.jpg" alt="Featured image of post Project Dionysus : The Vision of 2021" /&gt;&lt;p&gt;Now, at the beginning of 2021, while celebrating the anniversary of this project, where most of my effort in the past year was devoted, it&amp;rsquo;s vital to make clear the road head for it.&lt;/p&gt;
&lt;h2 id=&#34;hindsight&#34;&gt;Hindsight&lt;/h2&gt;
&lt;p&gt;What has been done for it in the past year and a few months? Above growing from the very first assembly file to a large project with tens of thousands of lines of code, these aspects stands out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Improvement of infrastructures of kernel&lt;/strong&gt; at the end of 2020, after 4 months struggling with file system, a minimum subset of EXT2 which support common operations like reading, creating and writing are implemented with a complete VFS abstraction. For the first time RAII and class hierarchy were adopted for kernel components. With the filesystem, all the modules of a usable kernel have been worked on more or less.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reliable build system has been adopted&lt;/strong&gt; Growing larger and larger, it&amp;rsquo;s difficult to manage the project by traditional makefiles, which is why CMake was introduced at earlier time last year. And after the long time working on the project, the decision turns out to be right. CMake provides a powerful tool to manage the project, as well as external dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code style and best practices were formed&lt;/strong&gt; Working long time with kernel, code styles like naming conventions have gained stability, and common best practices on kernel coding have been figured out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;now&#34;&gt;Now&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Better process model&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Optimized memory management&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache for file system&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Refactoring and resource leaks fixing&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Move things out of kernel&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved synchronization infrastructures&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rights and security&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Project Dionysus - Why and What</title>
        <link>https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/</link>
        <pubDate>Sun, 11 Oct 2020 16:25:35 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/</guid>
        <description>&lt;img src="https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/bootup.png" alt="Featured image of post Project Dionysus - Why and What" /&gt;&lt;h2 id=&#34;prologue&#34;&gt;Prologue&lt;/h2&gt;
&lt;p&gt;    Dating back to a year ago, when I was attempting to add various features to the original rexv6-2 project, I am trapped by some very tough issues. I had been ambitious about the plan, but many of them turn out to be too hard to be carried out, and some of the original code of xv6, frankly speaking, is somehow out of date. That&amp;rsquo;s when it flashed on me that it may be better to build a new one from scratch. At that time, I meet the series of papers about minix3 and the concept of microkernel, and exokernel, described by a paper from MIT. They were really appealed to me. In the following months, it gradually become the main work for me, and soon turned to be the longest-lasting personal project of mine.&lt;/p&gt;
&lt;h2 id=&#34;why-operation-system-kernel&#34;&gt;Why Operation System Kernel?&lt;/h2&gt;
&lt;p&gt;    As science and technologies advancing, all the devices are becoming powerful, bringing the concept of &amp;ldquo;Install and remove apps&amp;rdquo; everywhere, following the increasingly urgent need of reliable operation system kernels equipped with modern concepts and consensus. Among all the needs, security and reliability should be the top.  Intricate problem involved, it is impossible to keep the old routines. The new kernels recently appear in the industry, Google&amp;rsquo;s zircon for example, regard the concepts of microkernel, strictly isolated processes, and the well-encapsulated resource management as the key to success in the future. As the new consensus of the industry, these concepts must be invaluable for me, a freshman planning to major computer science, to acquire proficiency in. That&amp;rsquo;s the ultimate aim of project Dionysus.&lt;/p&gt;
&lt;h2 id=&#34;whats-the-principles-of-development&#34;&gt;What&amp;rsquo;s the Principles of Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Care about kernel itself first.&lt;br&gt;
    Having learned from previous attempts and failures, In this project, grub2 is used to boot the kernel, to block away the details and tricks that are too legacy. And user applications, shells, and GUI are &lt;strong&gt;not&lt;/strong&gt; priorities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application of data structures and algorithms&lt;br&gt;
    Being more familiar with data structures and algorithms with deeper understanding, It&amp;rsquo;s high time I should use it in a project and observe their pros and cons  in production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand every details, and choose the best&lt;br&gt;
    I regard this as a serious project to learn. So I shall figure out all every detail including how popular operation system do and why they do like that and choose the best means among them so as to deepen my understanding about operation system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;whats-going-on-now&#34;&gt;What&amp;rsquo;s Going on Now?&lt;/h2&gt;
&lt;p&gt;    Despite the ultimate aim, the more advanced a concept is, the harder it is for an individual to implement. So now the job is to first build a usable kernel on the mature techniques and concepts that popular operation system kernels mostly rely on. By now, the following modules had been covered partly or completely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory management&lt;/li&gt;
&lt;li&gt;Drivers&lt;/li&gt;
&lt;li&gt;Process management&lt;/li&gt;
&lt;li&gt;Power management&lt;/li&gt;
&lt;li&gt;File system&lt;/li&gt;
&lt;li&gt;Facilities for user apps&lt;/li&gt;
&lt;li&gt;Framework and libraries that all the above involved&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;    And they are now temporarily built into a macro kernel but are neatly divided and isolated from each other, making it possible for future changes.&lt;br&gt;
&lt;figure style=&#34;flex-grow: 155; flex-basis: 373px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/bootup.png&#34; data-size=&#34;722x464&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/bootup.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/bootup_hudfc1528e6f2f7b0f1fb3414667faae3a_28487_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/bootup_hudfc1528e6f2f7b0f1fb3414667faae3a_28487_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;722&#34;
				height=&#34;464&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Dionysus kernel, after finishing booting and initializations&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Dionysus kernel, after finishing booting and initializations&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;br&gt;
    Because of the complexity of file system and the design of interfaces, the development has been slow recently . A rough schedule is to finishe file system by the end of 2020, and finished other kernel modules by mid-2021.&lt;/p&gt;
&lt;h2 id=&#34;whats-the-plan-for-the-future&#34;&gt;What&amp;rsquo;s the Plan for the Future?&lt;/h2&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 203; flex-basis: 487px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/diag.png&#34; data-size=&#34;1110x546&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/diag.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/diag_hu3fef3a514eeba98b5de1bdd09b4b29e4_29200_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/project-dionysus-why-and-what/diag_hu3fef3a514eeba98b5de1bdd09b4b29e4_29200_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1110&#34;
				height=&#34;546&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Dionysus kernel, future architecture simple diagram&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Dionysus kernel, future architecture simple diagram&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;br&gt;
    To achieve the goal, after all the features are tested to work well, the first step is to implement a object manager to provide uniform interface and security guard for all the resource, making all the resources appears to be handles. and then the modules will be moved to separate processes running under kernel privileges.&lt;br&gt;
    The reason why system servers still run under kernel privileges is to simplify the development work. And two separate sets of API provided will make it easy to port existent Linux apps like LLVM  C/C++ standard libraries and compiler kits.&lt;br&gt;
    As another goal for me, a hand-made simple compiler may be implemented and used in the accomplished project, but so far there&amp;rsquo;s no plan to build a kernel with custom compilers.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;    I remember that I have had the idea to implement a kernel very early after I learn how to code. The urge become so strong that I make the first attempt when I graduate from junior high school, when I even find it difficult to understand the difference between physical memory and virtual memory. Then I made a few attempts afterwards, slowly becoming aware of the key points of kernel and how to build a kernel. During times of try and fail, I gradually know how to work with Linux distributions and start to  fall under the spell of the philosophy of UNIX. And then I learned more, and finally became determined to write my own. I am serious, and I will try my best this time to build a usable one with everything I&amp;rsquo;d ever imagined on it.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Announcing the Re-xv6-2 project</title>
        <link>https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/</link>
        <pubDate>Thu, 30 May 2019 23:11:01 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/</guid>
        <description>&lt;img src="https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/startup.png" alt="Featured image of post Announcing the Re-xv6-2 project" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Being considered as the three romances of a programmer, An OS is both challenging and interesting project to dive in. As a mature codebase of operation system study, xv6 is a good re-implementation of Unix v6, which is used by MIT&amp;rsquo;s 6.828.  This project aims at apply improvements on the a quasi-original codebase of xv6 (&lt;a class=&#34;link&#34; href=&#34;https://github.com/sunziping2016/xv6-improved&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xv6-improved&lt;/a&gt;) , adding including new kernel features and user support so as to create a linux-like full-featured kernel, including some modern techniques, such as MLFQ scheduling and an extended file system.&lt;br&gt;
Taking the mistakes of the 1st generation rexv6 project into consideration, the project will firstly be improved on the vital parts such as processes and memory management. Then filesystem and shell will be tweaked and a graphic framework will be finally constructed.&lt;br&gt;
In the implement of all the features, the algorithms and data structure will be thought over discreetly and put in the first place, instead of the feature itself or the amount of the features, so as to gain great efficiency.&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;Uncomplete and unsorted goals are listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lottery Scheduler&lt;/li&gt;
&lt;li&gt;FAT32 support&lt;/li&gt;
&lt;li&gt;Signals&lt;/li&gt;
&lt;li&gt;File structures and make system manipulations&lt;/li&gt;
&lt;li&gt;Support for various file systems and driver types&lt;/li&gt;
&lt;li&gt;Separating device driver from the kernel&lt;/li&gt;
&lt;li&gt;Memory management tweaks&lt;/li&gt;
&lt;li&gt;Shell and GUI&lt;/li&gt;
&lt;li&gt;POSIX compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;try-it-out&#34;&gt;Try it out&lt;/h2&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 154; flex-basis: 370px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/startup.png&#34; data-size=&#34;735x476&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/startup.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/startup_hu80b4c5ec6394807ea1fe3253899f66ea_21712_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/announcing-rexv6-proj/startup_hu80b4c5ec6394807ea1fe3253899f66ea_21712_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;735&#34;
				height=&#34;476&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Starup Screen&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Starup Screen&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-you-need&#34;&gt;What you need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A available Linux environment with Qemu installed.&lt;br&gt;
The alternatives includes WSL and any other virtual PCs. I am using Debian on WSL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build-essentials, or at least GNU tools such as gdb and gcc.&lt;br&gt;
GCC 6.3.0 is being used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone&#34;&gt;Clone&lt;/h3&gt;
&lt;p&gt;The project is hosted at &lt;a class=&#34;link&#34; href=&#34;https://github.com/SmartPolarBear/rexv6-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rexv6-2&lt;/a&gt;&lt;br&gt;
&lt;code&gt;$ git clone https://github.com/SmartPolarBear/rexv6-2.git&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;build&#34;&gt;Build&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ make qemu&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Respberry Pi 3B&#43; Headless Setup</title>
        <link>https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/</link>
        <pubDate>Sat, 23 Feb 2019 19:40:08 +0800</pubDate>
        
        <guid>https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/</guid>
        <description>&lt;img src="https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/Pi1.png" alt="Featured image of post Respberry Pi 3B&#43; Headless Setup" /&gt;&lt;h3 id=&#34;hands-on&#34;&gt;Hands-On&lt;/h3&gt;
&lt;p&gt;This morning I finally received my Raspberry Pi, after an eight-day-long delivery. Raspberry Pi 3B+, released in 2018, as is said, is more powerful than its predecessor. The first step after opening the box is to add two head sinks on the chip. The CPU doesn&amp;rsquo;t need one although its performance has been greatly improved, for it already has one. The given box has no reserved space for GPIO pins, which make it impossible to use it with GPIO peripherals. Therefore, my trick is that I installed a half of the box opposite down like what&amp;rsquo;s shown below.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 100; flex-basis: 240px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/Pi1.png&#34; data-size=&#34;1598x1598&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/Pi1.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/Pi1_hu2bd505227de8178f30754dbe5751e8b4_584110_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/Pi1_hu2bd505227de8178f30754dbe5751e8b4_584110_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1598&#34;
				height=&#34;1598&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Raspberry 3B&amp;#43;&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Raspberry 3B+&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;p&gt;I planed to run Windows 10 IoT at first, but finally I decided to use Raspbian as the support for 3B+ has not been officially released. The preview version is buggy and what&amp;rsquo;s worse, it can&amp;rsquo;t support the on-board Wi-Fi.&lt;/p&gt;
&lt;p&gt;As for setup, convenient as it is generally, there&amp;rsquo;s a big obstacle that I don&amp;rsquo;t have either a network cable or a set of keyboard and mouse. Moreover, my main PC runs Windows, which make the process more complicated.&lt;/p&gt;
&lt;p&gt;For a headless setup, we need two computers if your main computer runs Windows. As we often do for Pi on Windows, I format the micro SD card and write the Raspbian image with SD Card Formatter from Tuxera Inc. and Rufus. Then, the step is a bit different than common. After mounting the card on a &lt;strong&gt;Linux computer&lt;/strong&gt;, edit the file located in &lt;code&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; . For example, we use nano.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And append a network section like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ctrl_interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/wpa_supplicant &lt;span class=&#34;nv&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;netdev
&lt;span class=&#34;nv&#34;&gt;update_config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;ssid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Your wifi&amp;#39;s SSID&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;psk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Password&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;key_mgmt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;WPA-PSK
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are living in China, don&amp;rsquo;t forget a &lt;code&gt;country=CN&lt;/code&gt; before the network section.
Then insert the card, whose slot should be in &lt;strong&gt;the other end&lt;/strong&gt; of USBs on the board, and power on the Pi. When the red light is on and the green light is off, you can notice a new device in your router&amp;rsquo;s management page, which is often &lt;code&gt;192.168.1.1&lt;/code&gt; or &lt;code&gt;192.168.3.1&lt;/code&gt;. My Pi shows as a &lt;strong&gt;dhcpcd-6.11.5-armv7l&lt;/strong&gt; in the router&amp;rsquo;s management page with the IP shown in the screenshot.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 662; flex-basis: 1591px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/IP1.jpg&#34; data-size=&#34;1200x181&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/IP1.jpg&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/IP1_hu4a1dd2f37eeab413a48547703d464de3_25080_480x0_resize_q75_box.jpg 480w, https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/IP1_hu4a1dd2f37eeab413a48547703d464de3_25080_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1200&#34;
				height=&#34;181&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Raspberry 3B&amp;#43;&amp;rsquo;s IP&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Raspberry 3B+’s IP&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the IP address shown, we can easily connect to the Pi by any ssh tools. For example, putty.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 107; flex-basis: 257px&#34;&gt;
		&lt;a href=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/putty1.png&#34; data-size=&#34;615x574&#34;&gt;&lt;img src=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/putty1.png&#34;
				srcset=&#34;https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/putty1_huc714cd7562ae50425f8e9678279cb743_84738_480x0_resize_box_2.png 480w, https://xkzzzzzz.xyz/posts/resp-pi-headless-setup/putty1_huc714cd7562ae50425f8e9678279cb743_84738_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;615&#34;
				height=&#34;574&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Putty&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Putty&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;login-and-have-fun&#34;&gt;Login and Have Fun&lt;/h3&gt;
&lt;p&gt;As a Raspberry Pi denies a remote connection to the &lt;code&gt;root&lt;/code&gt; user, we should login with &lt;code&gt;pi&lt;/code&gt; user and the default password is &lt;code&gt;raspberry&lt;/code&gt;. The connection should be established well now and you can do anything with this tiny Linux device. Have fun!&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h3&gt;
&lt;p&gt;In the next passage I am going to control a LED matrix with GPIO pins. I will write a program in C++ or Python3 to control the MAX7219 module.&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://raspberrypi.stackexchange.com/questions/14611/how-to-set-up-raspberry-pi-without-a-monitor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to set up Raspberry Pi without a monitor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/20794478&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;树莓派 Raspberry Pi 3 无显示器安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/windows/iot-core/troubleshooting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Troubleshooting, Raspberry Pi 3B+ booting issues
&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
